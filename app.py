from flask import Flask, render_template, url_for , request, current_app, redirect, flash, jsonify

from flaskext.mysql import MySQL
import pymysql.cursors
import datetime
import os


app = Flask(__name__)

## A class containing all environment variables set in .env and the secret key for flash
class Config(object):
  MYSQL_DATABASE_HOST= os.environ.get('MYSQL_DATABASE_HOST')
  MYSQL_DATABASE_DB= os.environ.get('MYSQL_DATABASE_DB')
  MYSQL_DATABASE_USER= os.environ.get('MYSQL_DATABASE_USER')
  MYSQL_DATABASE_PASSWORD = os.environ.get('MYSQL_DATABASE_PASSWORD')

## Setting secret key for flash using random keys generated by os.urandom()
app.secret_key = os.urandom(24)

## Database configuration
app.config['MYSQL_DATABASE_HOST'] = Config.MYSQL_DATABASE_HOST
app.config['MYSQL_DATABASE_DB'] =  Config.MYSQL_DATABASE_DB
app.config['MYSQL_DATABASE_USER'] = Config.MYSQL_DATABASE_USER
app.config['MYSQL_DATABASE_PASSWORD'] =  Config.MYSQL_DATABASE_PASSWORD

# pymysql for converting  list to  dictionary
mysql = MySQL(app, cursorclass=pymysql.cursors.DictCursor)

@app.route("/")
def index():
  return render_template('home.html')

@app.route("/portal", methods=['GET','POST'])
def portal():
  if request.method == 'GET':
    return render_template('portal_form.html')

  else:
    image = request.files['image']
    fname = request.form['fname']
    mname = request.form['mname']
    lname = request.form['lname']
    email = request.form['email']
    dob = request.form['dob']
    gender = request.form['gndr']
    phone = request.form['phone']
    address = request.form['address']
    state = request.form['state']
    lg = request.form['lg']
    kin = request.form['kin']
    score = request.form['score']

    ## Checking if values are empty
    if image.filename == "" or fname == "" or mname == "" or lname == "" or email == "" or dob == "" or gender == "" or phone == "" or address == "" or state == "" or lg == "" or kin =="" or score =="":
          flash('Please fill all your information and try again', 'danger')
          return redirect(url_for('portal'))
      
    else:
      ## Convert firstname(fname) to lowercase
      image_name = fname.lower()

      ## The user firstname will be the image name

      filepath = os.path.join(current_app.root_path, 'static/images/'+image_name+'.png')

      ## Saved on the project directory
      image.save(filepath)

      ## filepath for image splitted and only the image name is picked out to be stored in the database
      img = filepath.split('/')

      ## The image name picked out and stored in a variable
      img_db = img[2]
         ## Connecting to database
      connection = mysql.get_db()
      cursor = connection.cursor()
      cursor.execute('''INSERT INTO student(image, fname, mname, lname, email, dob, gender, phone, 
      address, state, lg, kin, score) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)''',
       (img_db, fname, mname, lname, email, dob, gender, phone, address, state, lg, kin, score))
      connection.commit()
      cursor.close()
      return redirect(url_for('dashboard'))
       

@app.route("/admin/students/<id>")
def student_details(id):
  student_id = id
  connection = mysql.get_db()
  cursor = connection.cursor()
  cursor.execute('SELECT * FROM student WHERE id=%s', (student_id))
  student = cursor.fetchall()
  student_details = student[0]
  cursor.close()
  return render_template('student_details.html', student=student_details)

@app.route("/dashboard")
def dashboard():
  connection = mysql.get_db()
  cursor = connection.cursor()
  cursor.execute('SELECT * FROM student')
  student = cursor.fetchall()
  cursor.close()
  return render_template('students_index.html', students=student)

## This route will be updating the student status
@app.route('/update_status/<id>', methods = ['POST'])
def update_status(id):
    data = request.json
    student_id = id
    connection = mysql.get_db()
    cursor = connection.cursor()
    cursor.execute('UPDATE student SET status=%s WHERE id=%s', (data, student_id ))
    connection.commit()
    ## The status is fetched from the database and sent to the frontend
    cursor.execute('SELECT status FROM student WHERE id=%s', (student_id))
    student_status =  cursor.fetchall()
    cursor.close()
    response = student_status[0]
    return jsonify(response)
    
if __name__ == "__main__":
  app.run(debug=True)


